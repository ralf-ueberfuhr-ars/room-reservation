AWSTemplateFormatVersion: 2010-09-09
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html
Transform: AWS::Serverless-2016-10-31
Description: Room Reservation Services
Parameters:
  NameSpace:
    Type: String
    Description: Prefix for all services that are created by this stack
    Default: rrapp-
Globals:
  Api:
    Cors:
      AllowOrigin: '''*'''
      AllowHeaders: '''Content-Type'''
      AllowMethods: '''GET,OPTIONS'''
Resources:
  # DynamoDB tables
  #  - TODO: initialize data (see Serverlesspresso: FillDatabasesCustomResource)
  RoomTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${NameSpace}rooms"
      AttributeDefinitions:
        - AttributeName: roomNr
          AttributeType: S
#        - AttributeName: description
#          AttributeType: S
      KeySchema:
        - AttributeName: roomNr
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    Metadata:
      SamResourceId: RoomTable
  RoomReservationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${NameSpace}room-reservations"
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S
#        - AttributeName: date
#          AttributeType: S
#        - AttributeName: room
#          AttributeType: S
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    Metadata:
      SamResourceId: RoomReservationsTable
      # TODO create GSI
  # Lambda Layers
  LambdaDependenciesLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "${NameSpace}common-dependencies"
      CompatibleRuntimes:
        - java17
      Content:
        S3Bucket: "room-reservation"
        S3Key: "app/lambdas-deps-layer.zip"
  LambdaDomainLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "${NameSpace}domain"
      CompatibleRuntimes:
        - java17
      Content:
        S3Bucket: "room-reservation"
        S3Key: "app/domain-layer.zip"
  PersistenceLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "${NameSpace}persistence-aws-dynamodb"
      CompatibleRuntimes:
        - java17
      Content:
        S3Bucket: "room-reservation"
        S3Key: "app/persistence-aws-dynamodb-layer.zip"
  # Lambda Functions
  CreateRoomReservation:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${NameSpace}room-reservation-create"
      CodeUri: s3://room-reservation/app/lambdas.jar
      Handler: de.ars.rooms.reservations.lambda.CreateRoomReservationHandler::handleRequest
      Runtime: java17
      Timeout: 15
      MemorySize: 512
      Layers:
        - !Ref LambdaDependenciesLayer
        - !Ref LambdaDomainLayer
        - !Ref PersistenceLayer
      Environment:
        Variables:
          ROOM_RESERVATIONS_TABLE:
            Ref: RoomReservationsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RoomReservationsTable
    Metadata:
      SamResourceId: CreateRoomReservation
  FindRoomReservationFromApi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${NameSpace}room-reservation-api-find"
      CodeUri: s3://room-reservation/app/lambdas.jar
      Handler: de.ars.rooms.reservations.lambda.gateway.FindRoomReservationsHandler::handleRequest
      Runtime: java17
      Timeout: 15
      MemorySize: 512
      Layers:
        - !Ref LambdaDependenciesLayer
        - !Ref LambdaDomainLayer
        - !Ref PersistenceLayer
      Environment:
        Variables:
          ROOM_RESERVATIONS_TABLE:
            Ref: RoomReservationsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: RoomReservationsTable
    Metadata:
      SamResourceId: FindRoomReservationFromApi
  # API Gateway
  RoomsApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${NameSpace}api"
      ProtocolType: HTTP
  RoomsApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref RoomsApi
      StageName: '$default'
      AutoDeploy: true
  FindReservationsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RoomsApi
      PayloadFormatVersion: '2.0'
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::GetAtt:
          - "FindRoomReservationFromApi"
          - "Arn"
        #!Sub  "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${NameSpace}room-reservation-api-find"
  PermissionForAPIGatewayToInvokeFindRoomReservationFromApi:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref "FindRoomReservationFromApi"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
  FindReservationsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RoomsApi
      OperationName: FindReservations
      RouteKey: GET /api/v1/rooms/{room}/reservations
      Target: !Join
        - /
        - - integrations
          - !Ref FindReservationsIntegration